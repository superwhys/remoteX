syntax = "proto3";

package pb;

import "ext.proto";
import "internal/filesystem/entry.proto";

message SyncOpts {
	// Path is the destination file or directory sent by the sender
	string path = 1;
	// Dest is the local directory where the receiver will save the file or directory received by the sender
	string dest = 2;
	// DryRun simulated operation without actual file transfer
	bool dry_run = 3;
	// Whole sync all files, not just modified ones. Default is false, sync only modified files.
	bool whole = 4;
}

message FileBase {
	filesystem.Entry entry = 1 [(ext.nullable) = true];
  	bool is_end = 2;
}

message FileList {
	int64 total_size = 1;
  	string strip = 2;
  	repeated FileBase files = 3 [(ext.nullable) = true];
}

message FileIdx {
	int64 idx = 1;
}

message HashBuf {
	int64 offset = 1;
	int64 len = 2;
	int64 index = 3;
	uint32 sum1 = 4;
	bytes sum2 = 5;
}

message HashHead {
	// number of blocks
	int64 check_sum_count = 1;

	// block length in the file
	int64 block_length = 2;

	int64 check_sum_length = 3;

	// RemainderLength is fileLength % BlockLength
	int64 remainder_length = 4;

	repeated HashBuf hashs = 5 [(ext.nullable) = true]; 
}

message FileChunk {
	HashBuf hash = 1 [(ext.nullable) = true];
	bytes data = 2;
	bool is_end = 3;
}

message syncFile {
	string name = 1;
	int64 size = 2;
	filesystem.EntryType type = 3;
}

message SyncResp {
	int64 total = 1;
	int64 total_size = 2 [(ext.json) = "total_size"];
	int64 actual_send_bytes = 3 [(ext.json) = "actual_send_bytes"];
	repeated syncFile files = 4 [(ext.nullable) = true];
}

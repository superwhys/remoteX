// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal/filesync/pb/filesync.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	filesystem "github.com/superwhys/remoteX/internal/filesystem"
	_ "github.com/superwhys/remoteX/internal/proto/ext"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FileBase struct {
	Entry *filesystem.Entry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry" yaml:"-"`
	IsEnd bool              `protobuf:"varint,2,opt,name=is_end,json=isEnd,proto3" json:"isEnd" yaml:"-"`
}

func (m *FileBase) Reset()         { *m = FileBase{} }
func (m *FileBase) String() string { return proto.CompactTextString(m) }
func (*FileBase) ProtoMessage()    {}
func (*FileBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2a1b515271a6305, []int{0}
}
func (m *FileBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileBase.Merge(m, src)
}
func (m *FileBase) XXX_Size() int {
	return m.ProtoSize()
}
func (m *FileBase) XXX_DiscardUnknown() {
	xxx_messageInfo_FileBase.DiscardUnknown(m)
}

var xxx_messageInfo_FileBase proto.InternalMessageInfo

func (m *FileBase) GetEntry() *filesystem.Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *FileBase) GetIsEnd() bool {
	if m != nil {
		return m.IsEnd
	}
	return false
}

type FileList struct {
	TotalSize int64       `protobuf:"varint,1,opt,name=total_size,json=totalSize,proto3" json:"totalSize" yaml:"-"`
	Strip     string      `protobuf:"bytes,2,opt,name=strip,proto3" json:"strip" yaml:"-"`
	Files     []*FileBase `protobuf:"bytes,3,rep,name=files,proto3" json:"files" yaml:"-"`
}

func (m *FileList) Reset()         { *m = FileList{} }
func (m *FileList) String() string { return proto.CompactTextString(m) }
func (*FileList) ProtoMessage()    {}
func (*FileList) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2a1b515271a6305, []int{1}
}
func (m *FileList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileList.Merge(m, src)
}
func (m *FileList) XXX_Size() int {
	return m.ProtoSize()
}
func (m *FileList) XXX_DiscardUnknown() {
	xxx_messageInfo_FileList.DiscardUnknown(m)
}

var xxx_messageInfo_FileList proto.InternalMessageInfo

func (m *FileList) GetTotalSize() int64 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

func (m *FileList) GetStrip() string {
	if m != nil {
		return m.Strip
	}
	return ""
}

func (m *FileList) GetFiles() []*FileBase {
	if m != nil {
		return m.Files
	}
	return nil
}

type FileIdx struct {
	Idx int64 `protobuf:"varint,1,opt,name=idx,proto3" json:"idx" yaml:"-"`
}

func (m *FileIdx) Reset()         { *m = FileIdx{} }
func (m *FileIdx) String() string { return proto.CompactTextString(m) }
func (*FileIdx) ProtoMessage()    {}
func (*FileIdx) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2a1b515271a6305, []int{2}
}
func (m *FileIdx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileIdx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileIdx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileIdx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileIdx.Merge(m, src)
}
func (m *FileIdx) XXX_Size() int {
	return m.ProtoSize()
}
func (m *FileIdx) XXX_DiscardUnknown() {
	xxx_messageInfo_FileIdx.DiscardUnknown(m)
}

var xxx_messageInfo_FileIdx proto.InternalMessageInfo

func (m *FileIdx) GetIdx() int64 {
	if m != nil {
		return m.Idx
	}
	return 0
}

type HashBuf struct {
	Offset int64  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset" yaml:"-"`
	Len    int64  `protobuf:"varint,2,opt,name=len,proto3" json:"len" yaml:"-"`
	Index  int64  `protobuf:"varint,3,opt,name=index,proto3" json:"index" yaml:"-"`
	Sum1   uint32 `protobuf:"varint,4,opt,name=sum1,proto3" json:"sum1" yaml:"-"`
	Sum2   []byte `protobuf:"bytes,5,opt,name=sum2,proto3" json:"sum2" yaml:"-"`
}

func (m *HashBuf) Reset()         { *m = HashBuf{} }
func (m *HashBuf) String() string { return proto.CompactTextString(m) }
func (*HashBuf) ProtoMessage()    {}
func (*HashBuf) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2a1b515271a6305, []int{3}
}
func (m *HashBuf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HashBuf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HashBuf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HashBuf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashBuf.Merge(m, src)
}
func (m *HashBuf) XXX_Size() int {
	return m.ProtoSize()
}
func (m *HashBuf) XXX_DiscardUnknown() {
	xxx_messageInfo_HashBuf.DiscardUnknown(m)
}

var xxx_messageInfo_HashBuf proto.InternalMessageInfo

func (m *HashBuf) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *HashBuf) GetLen() int64 {
	if m != nil {
		return m.Len
	}
	return 0
}

func (m *HashBuf) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *HashBuf) GetSum1() uint32 {
	if m != nil {
		return m.Sum1
	}
	return 0
}

func (m *HashBuf) GetSum2() []byte {
	if m != nil {
		return m.Sum2
	}
	return nil
}

type HashHead struct {
	// number of blocks
	CheckSumCount int64 `protobuf:"varint,1,opt,name=check_sum_count,json=checkSumCount,proto3" json:"checkSumCount" yaml:"-"`
	// block length in the file
	BlockLength    int64 `protobuf:"varint,2,opt,name=block_length,json=blockLength,proto3" json:"blockLength" yaml:"-"`
	CheckSumLength int64 `protobuf:"varint,3,opt,name=check_sum_length,json=checkSumLength,proto3" json:"checkSumLength" yaml:"-"`
	// RemainderLength is fileLength % BlockLength
	RemainderLength int64      `protobuf:"varint,4,opt,name=remainder_length,json=remainderLength,proto3" json:"remainderLength" yaml:"-"`
	Hashs           []*HashBuf `protobuf:"bytes,5,rep,name=hashs,proto3" json:"hashs" yaml:"-"`
}

func (m *HashHead) Reset()         { *m = HashHead{} }
func (m *HashHead) String() string { return proto.CompactTextString(m) }
func (*HashHead) ProtoMessage()    {}
func (*HashHead) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2a1b515271a6305, []int{4}
}
func (m *HashHead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HashHead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HashHead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HashHead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashHead.Merge(m, src)
}
func (m *HashHead) XXX_Size() int {
	return m.ProtoSize()
}
func (m *HashHead) XXX_DiscardUnknown() {
	xxx_messageInfo_HashHead.DiscardUnknown(m)
}

var xxx_messageInfo_HashHead proto.InternalMessageInfo

func (m *HashHead) GetCheckSumCount() int64 {
	if m != nil {
		return m.CheckSumCount
	}
	return 0
}

func (m *HashHead) GetBlockLength() int64 {
	if m != nil {
		return m.BlockLength
	}
	return 0
}

func (m *HashHead) GetCheckSumLength() int64 {
	if m != nil {
		return m.CheckSumLength
	}
	return 0
}

func (m *HashHead) GetRemainderLength() int64 {
	if m != nil {
		return m.RemainderLength
	}
	return 0
}

func (m *HashHead) GetHashs() []*HashBuf {
	if m != nil {
		return m.Hashs
	}
	return nil
}

type FileChunk struct {
	Hash  *HashBuf `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash" yaml:"-"`
	Data  []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data" yaml:"-"`
	IsEnd bool     `protobuf:"varint,3,opt,name=is_end,json=isEnd,proto3" json:"isEnd" yaml:"-"`
}

func (m *FileChunk) Reset()         { *m = FileChunk{} }
func (m *FileChunk) String() string { return proto.CompactTextString(m) }
func (*FileChunk) ProtoMessage()    {}
func (*FileChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2a1b515271a6305, []int{5}
}
func (m *FileChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileChunk.Merge(m, src)
}
func (m *FileChunk) XXX_Size() int {
	return m.ProtoSize()
}
func (m *FileChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_FileChunk.DiscardUnknown(m)
}

var xxx_messageInfo_FileChunk proto.InternalMessageInfo

func (m *FileChunk) GetHash() *HashBuf {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *FileChunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FileChunk) GetIsEnd() bool {
	if m != nil {
		return m.IsEnd
	}
	return false
}

type SyncFile struct {
	Name string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name" yaml:"-"`
	Size int64                `protobuf:"varint,2,opt,name=size,proto3" json:"size" yaml:"-"`
	Type filesystem.EntryType `protobuf:"varint,3,opt,name=type,proto3,enum=filesystem.EntryType" json:"type" yaml:"-"`
}

func (m *SyncFile) Reset()         { *m = SyncFile{} }
func (m *SyncFile) String() string { return proto.CompactTextString(m) }
func (*SyncFile) ProtoMessage()    {}
func (*SyncFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2a1b515271a6305, []int{6}
}
func (m *SyncFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncFile.Merge(m, src)
}
func (m *SyncFile) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SyncFile) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncFile.DiscardUnknown(m)
}

var xxx_messageInfo_SyncFile proto.InternalMessageInfo

func (m *SyncFile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SyncFile) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *SyncFile) GetType() filesystem.EntryType {
	if m != nil {
		return m.Type
	}
	return filesystem.EntryTypeUnknown
}

type SyncResp struct {
	Total           int64       `protobuf:"varint,1,opt,name=total,proto3" json:"total" yaml:"-"`
	TotalSize       int64       `protobuf:"varint,2,opt,name=total_size,json=totalSize,proto3" json:"total_size" yaml:"-"`
	ActualSendBytes int64       `protobuf:"varint,3,opt,name=actual_send_bytes,json=actualSendBytes,proto3" json:"actual_send_bytes" yaml:"-"`
	Files           []*SyncFile `protobuf:"bytes,4,rep,name=files,proto3" json:"files" yaml:"-"`
}

func (m *SyncResp) Reset()         { *m = SyncResp{} }
func (m *SyncResp) String() string { return proto.CompactTextString(m) }
func (*SyncResp) ProtoMessage()    {}
func (*SyncResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2a1b515271a6305, []int{7}
}
func (m *SyncResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncResp.Merge(m, src)
}
func (m *SyncResp) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SyncResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncResp.DiscardUnknown(m)
}

var xxx_messageInfo_SyncResp proto.InternalMessageInfo

func (m *SyncResp) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *SyncResp) GetTotalSize() int64 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

func (m *SyncResp) GetActualSendBytes() int64 {
	if m != nil {
		return m.ActualSendBytes
	}
	return 0
}

func (m *SyncResp) GetFiles() []*SyncFile {
	if m != nil {
		return m.Files
	}
	return nil
}

func init() {
	proto.RegisterType((*FileBase)(nil), "pb.FileBase")
	proto.RegisterType((*FileList)(nil), "pb.FileList")
	proto.RegisterType((*FileIdx)(nil), "pb.FileIdx")
	proto.RegisterType((*HashBuf)(nil), "pb.HashBuf")
	proto.RegisterType((*HashHead)(nil), "pb.HashHead")
	proto.RegisterType((*FileChunk)(nil), "pb.FileChunk")
	proto.RegisterType((*SyncFile)(nil), "pb.syncFile")
	proto.RegisterType((*SyncResp)(nil), "pb.SyncResp")
}

func init() {
	proto.RegisterFile("internal/filesync/pb/filesync.proto", fileDescriptor_e2a1b515271a6305)
}

var fileDescriptor_e2a1b515271a6305 = []byte{
	// 807 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0xcd, 0x6e, 0xeb, 0x44,
	0x14, 0xc7, 0xe3, 0x7c, 0xb4, 0xc9, 0xa4, 0x9f, 0x03, 0x45, 0xa1, 0x50, 0x3b, 0x32, 0x45, 0x8a,
	0x04, 0x24, 0x34, 0x48, 0x08, 0x21, 0xf1, 0xe5, 0xaa, 0xa5, 0xa0, 0x4a, 0x48, 0x09, 0x0b, 0xc4,
	0x26, 0xf2, 0xc7, 0xa4, 0xb6, 0x6a, 0x8f, 0x2d, 0xcf, 0x58, 0xc4, 0x5d, 0xf1, 0x08, 0xbc, 0x01,
	0x15, 0x1b, 0x5e, 0xe0, 0x3e, 0x44, 0x77, 0x37, 0xcb, 0xbb, 0xb2, 0xd4, 0x66, 0x75, 0xbd, 0xec,
	0x13, 0x5c, 0xcd, 0xb1, 0xd3, 0xc4, 0x49, 0x17, 0xdd, 0xc5, 0xbf, 0x73, 0xce, 0xff, 0xcc, 0x39,
	0x73, 0xe6, 0x04, 0x7d, 0xe2, 0x50, 0x4e, 0x42, 0xaa, 0xbb, 0xbd, 0xb1, 0xe3, 0x12, 0x16, 0x53,
	0xb3, 0x17, 0x18, 0x4f, 0xbf, 0xbb, 0x41, 0xe8, 0x73, 0x1f, 0x97, 0x03, 0xe3, 0xb0, 0x41, 0x26,
	0x3c, 0xfb, 0x3c, 0x54, 0x56, 0x62, 0x18, 0x27, 0x5e, 0x8f, 0x50, 0x1e, 0xc6, 0x99, 0x83, 0xfa,
	0xb7, 0x84, 0xea, 0xe7, 0x8e, 0x4b, 0x34, 0x9d, 0x11, 0x7c, 0x8e, 0x6a, 0x60, 0x6b, 0x49, 0x6d,
	0xa9, 0xd3, 0xec, 0xef, 0x77, 0x17, 0x41, 0xdd, 0x33, 0x61, 0xd0, 0x8e, 0xee, 0x12, 0x45, 0x4a,
	0x13, 0x25, 0xf3, 0x7b, 0x4c, 0x94, 0x7a, 0xac, 0x7b, 0xee, 0xb7, 0xea, 0x17, 0xea, 0xed, 0xf4,
	0x58, 0x1a, 0x64, 0x18, 0x7f, 0x8e, 0x36, 0x1c, 0x36, 0x22, 0xd4, 0x6a, 0x95, 0xdb, 0x52, 0xa7,
	0xae, 0x1d, 0x88, 0x08, 0x87, 0x9d, 0x51, 0x6b, 0x39, 0x62, 0x90, 0x21, 0xf5, 0x55, 0x7e, 0x84,
	0x4b, 0x87, 0x71, 0xfc, 0x0d, 0x42, 0xdc, 0xe7, 0xba, 0x3b, 0x62, 0xce, 0x0d, 0x81, 0x73, 0x54,
	0xb4, 0x0f, 0xd3, 0x44, 0x69, 0x00, 0x1d, 0x3a, 0x37, 0xa4, 0x20, 0xb1, 0xc0, 0xf8, 0x33, 0x54,
	0x63, 0x3c, 0x74, 0x02, 0xc8, 0xd9, 0xc8, 0x72, 0x02, 0x28, 0xe6, 0x04, 0x84, 0x7f, 0x42, 0x35,
	0xa8, 0xad, 0x55, 0x69, 0x57, 0x3a, 0xcd, 0xfe, 0x56, 0x37, 0x30, 0xba, 0xf3, 0x36, 0x2c, 0x8a,
	0x04, 0x97, 0xf5, 0x22, 0x01, 0xab, 0x5f, 0xa2, 0x4d, 0x11, 0xf1, 0x8b, 0x35, 0xc1, 0x9f, 0xa2,
	0x8a, 0x63, 0x4d, 0xf2, 0xd3, 0xbe, 0x97, 0x26, 0x8a, 0xf8, 0x2c, 0xa4, 0x15, 0x40, 0xbd, 0x97,
	0xd0, 0xe6, 0x85, 0xce, 0x6c, 0x2d, 0x1a, 0xe3, 0x2e, 0xda, 0xf0, 0xc7, 0x63, 0x46, 0x78, 0x1e,
	0xf5, 0x41, 0x9a, 0x28, 0x39, 0x29, 0x04, 0xe6, 0x4c, 0xa4, 0x70, 0x09, 0x85, 0xda, 0xf2, 0x14,
	0x2e, 0xa1, 0xc5, 0x14, 0x2e, 0xa1, 0xa2, 0x09, 0x0e, 0xb5, 0xc8, 0xa4, 0x55, 0x01, 0xc7, 0xac,
	0xf1, 0x02, 0xac, 0x34, 0x5e, 0x20, 0xdc, 0x41, 0x55, 0x16, 0x79, 0x27, 0xad, 0x6a, 0x5b, 0xea,
	0x6c, 0x6b, 0xef, 0xa7, 0x89, 0x02, 0xdf, 0x05, 0x57, 0x20, 0xb9, 0x67, 0xbf, 0x55, 0x6b, 0x4b,
	0x9d, 0xad, 0x27, 0xcf, 0xfe, 0x9a, 0x67, 0x5f, 0x7d, 0x5b, 0x46, 0x75, 0x51, 0xe3, 0x05, 0xd1,
	0x2d, 0x7c, 0x86, 0x76, 0x4d, 0x9b, 0x98, 0xd7, 0x23, 0x16, 0x79, 0x23, 0xd3, 0x8f, 0xe8, 0xbc,
	0xda, 0xa3, 0x34, 0x51, 0xb6, 0xc1, 0x34, 0x8c, 0xbc, 0x53, 0x61, 0x28, 0x48, 0x15, 0x4d, 0xf8,
	0x7b, 0xb4, 0x65, 0xb8, 0xbe, 0x79, 0x3d, 0x72, 0x09, 0xbd, 0xe2, 0x76, 0xde, 0x84, 0x8f, 0xd2,
	0x44, 0x69, 0x02, 0xbf, 0x04, 0x5c, 0x50, 0x58, 0x36, 0xe0, 0x0b, 0xb4, 0xb7, 0x38, 0x46, 0xae,
	0x91, 0xf5, 0x47, 0x4e, 0x13, 0x65, 0x67, 0x9e, 0xec, 0x19, 0x99, 0x15, 0x1b, 0xfe, 0x15, 0xed,
	0x85, 0xc4, 0xd3, 0x45, 0xfb, 0xc2, 0xb9, 0x52, 0x15, 0x94, 0x94, 0x34, 0x51, 0x76, 0x9f, 0x6c,
	0xcf, 0x48, 0xad, 0x1a, 0xf1, 0x8f, 0xa8, 0x66, 0xeb, 0xcc, 0x66, 0xad, 0x1a, 0x8c, 0x60, 0x53,
	0x8c, 0x60, 0x3e, 0x1d, 0x8b, 0x09, 0x04, 0x8f, 0xf5, 0x09, 0x04, 0xac, 0xfe, 0x27, 0xa1, 0x86,
	0x18, 0xc1, 0x53, 0x3b, 0xa2, 0xd7, 0xf8, 0x3b, 0x54, 0x15, 0x38, 0x7f, 0xbb, 0x05, 0xb9, 0x8f,
	0x73, 0x39, 0x70, 0x58, 0x53, 0x03, 0x2a, 0xae, 0xd8, 0xd2, 0xb9, 0x0e, 0xcd, 0xcd, 0xaf, 0x58,
	0x7c, 0x17, 0xaf, 0x58, 0x90, 0xa5, 0xd7, 0x5d, 0x79, 0xc1, 0xeb, 0xfe, 0x57, 0x42, 0x75, 0xb1,
	0x9f, 0xc4, 0x41, 0x45, 0x12, 0xaa, 0x7b, 0xd9, 0xbb, 0x6e, 0x64, 0x49, 0xc4, 0x77, 0x31, 0x89,
	0x20, 0x30, 0x71, 0x62, 0x03, 0x64, 0x77, 0x9d, 0x4d, 0xdc, 0xea, 0xe3, 0x07, 0x82, 0x7f, 0x40,
	0x55, 0x1e, 0x07, 0x04, 0x0e, 0xb3, 0xd3, 0x3f, 0x58, 0xdb, 0x59, 0xbf, 0xc7, 0x01, 0xc9, 0x04,
	0x84, 0x5b, 0x51, 0x40, 0x10, 0xf5, 0xff, 0x32, 0xaa, 0x0f, 0x63, 0x6a, 0x0e, 0x08, 0x0b, 0xc4,
	0x03, 0x82, 0x95, 0x92, 0x0f, 0x2a, 0xd4, 0x06, 0xa0, 0x58, 0x1b, 0x20, 0xfc, 0x73, 0x61, 0x59,
	0x65, 0x47, 0xed, 0xa4, 0x89, 0xb2, 0x44, 0x97, 0xc3, 0x1e, 0x5f, 0x1f, 0x2f, 0x59, 0x96, 0x77,
	0x97, 0x81, 0xf6, 0x75, 0x93, 0x47, 0xc2, 0x42, 0xa8, 0x35, 0x32, 0x62, 0x0e, 0xab, 0x49, 0xe8,
	0x7d, 0x9d, 0x26, 0xca, 0xba, 0x71, 0x45, 0x76, 0xdd, 0x61, 0xb0, 0x9b, 0xa1, 0x21, 0xa1, 0x96,
	0x26, 0xc0, 0x62, 0xe5, 0x55, 0x17, 0x2b, 0x6f, 0x7e, 0x31, 0x2f, 0x5b, 0x79, 0xda, 0x6f, 0xd3,
	0x7b, 0xb9, 0x74, 0xf7, 0x20, 0x4b, 0xd3, 0x07, 0x59, 0xfa, 0x67, 0x26, 0x97, 0x6e, 0x67, 0xb2,
	0x34, 0x9d, 0xc9, 0xa5, 0x37, 0x33, 0xb9, 0xf4, 0xe7, 0xc9, 0x95, 0xc3, 0xed, 0xc8, 0xe8, 0x9a,
	0xbe, 0xd7, 0x63, 0x51, 0x40, 0xc2, 0xbf, 0xec, 0x98, 0xf5, 0x42, 0xe2, 0xf9, 0x9c, 0xfc, 0xd1,
	0x7b, 0xee, 0xcf, 0xcb, 0xd8, 0x80, 0x3f, 0xa1, 0xaf, 0xde, 0x05, 0x00, 0x00, 0xff, 0xff, 0x53,
	0x91, 0x7e, 0x4d, 0xdb, 0x06, 0x00, 0x00,
}

func (m *FileBase) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsEnd {
		i--
		if m.IsEnd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Entry != nil {
		{
			size, err := m.Entry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilesync(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FileList) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileList) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Files[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFilesync(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Strip) > 0 {
		i -= len(m.Strip)
		copy(dAtA[i:], m.Strip)
		i = encodeVarintFilesync(dAtA, i, uint64(len(m.Strip)))
		i--
		dAtA[i] = 0x12
	}
	if m.TotalSize != 0 {
		i = encodeVarintFilesync(dAtA, i, uint64(m.TotalSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FileIdx) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileIdx) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileIdx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Idx != 0 {
		i = encodeVarintFilesync(dAtA, i, uint64(m.Idx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HashBuf) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HashBuf) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HashBuf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sum2) > 0 {
		i -= len(m.Sum2)
		copy(dAtA[i:], m.Sum2)
		i = encodeVarintFilesync(dAtA, i, uint64(len(m.Sum2)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Sum1 != 0 {
		i = encodeVarintFilesync(dAtA, i, uint64(m.Sum1))
		i--
		dAtA[i] = 0x20
	}
	if m.Index != 0 {
		i = encodeVarintFilesync(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if m.Len != 0 {
		i = encodeVarintFilesync(dAtA, i, uint64(m.Len))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintFilesync(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HashHead) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HashHead) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HashHead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hashs) > 0 {
		for iNdEx := len(m.Hashs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hashs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFilesync(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.RemainderLength != 0 {
		i = encodeVarintFilesync(dAtA, i, uint64(m.RemainderLength))
		i--
		dAtA[i] = 0x20
	}
	if m.CheckSumLength != 0 {
		i = encodeVarintFilesync(dAtA, i, uint64(m.CheckSumLength))
		i--
		dAtA[i] = 0x18
	}
	if m.BlockLength != 0 {
		i = encodeVarintFilesync(dAtA, i, uint64(m.BlockLength))
		i--
		dAtA[i] = 0x10
	}
	if m.CheckSumCount != 0 {
		i = encodeVarintFilesync(dAtA, i, uint64(m.CheckSumCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FileChunk) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsEnd {
		i--
		if m.IsEnd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintFilesync(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Hash != nil {
		{
			size, err := m.Hash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilesync(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncFile) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintFilesync(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Size != 0 {
		i = encodeVarintFilesync(dAtA, i, uint64(m.Size))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFilesync(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncResp) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Files[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFilesync(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ActualSendBytes != 0 {
		i = encodeVarintFilesync(dAtA, i, uint64(m.ActualSendBytes))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalSize != 0 {
		i = encodeVarintFilesync(dAtA, i, uint64(m.TotalSize))
		i--
		dAtA[i] = 0x10
	}
	if m.Total != 0 {
		i = encodeVarintFilesync(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFilesync(dAtA []byte, offset int, v uint64) int {
	offset -= sovFilesync(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FileBase) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Entry != nil {
		l = m.Entry.ProtoSize()
		n += 1 + l + sovFilesync(uint64(l))
	}
	if m.IsEnd {
		n += 2
	}
	return n
}

func (m *FileList) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalSize != 0 {
		n += 1 + sovFilesync(uint64(m.TotalSize))
	}
	l = len(m.Strip)
	if l > 0 {
		n += 1 + l + sovFilesync(uint64(l))
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.ProtoSize()
			n += 1 + l + sovFilesync(uint64(l))
		}
	}
	return n
}

func (m *FileIdx) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Idx != 0 {
		n += 1 + sovFilesync(uint64(m.Idx))
	}
	return n
}

func (m *HashBuf) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovFilesync(uint64(m.Offset))
	}
	if m.Len != 0 {
		n += 1 + sovFilesync(uint64(m.Len))
	}
	if m.Index != 0 {
		n += 1 + sovFilesync(uint64(m.Index))
	}
	if m.Sum1 != 0 {
		n += 1 + sovFilesync(uint64(m.Sum1))
	}
	l = len(m.Sum2)
	if l > 0 {
		n += 1 + l + sovFilesync(uint64(l))
	}
	return n
}

func (m *HashHead) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CheckSumCount != 0 {
		n += 1 + sovFilesync(uint64(m.CheckSumCount))
	}
	if m.BlockLength != 0 {
		n += 1 + sovFilesync(uint64(m.BlockLength))
	}
	if m.CheckSumLength != 0 {
		n += 1 + sovFilesync(uint64(m.CheckSumLength))
	}
	if m.RemainderLength != 0 {
		n += 1 + sovFilesync(uint64(m.RemainderLength))
	}
	if len(m.Hashs) > 0 {
		for _, e := range m.Hashs {
			l = e.ProtoSize()
			n += 1 + l + sovFilesync(uint64(l))
		}
	}
	return n
}

func (m *FileChunk) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != nil {
		l = m.Hash.ProtoSize()
		n += 1 + l + sovFilesync(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFilesync(uint64(l))
	}
	if m.IsEnd {
		n += 2
	}
	return n
}

func (m *SyncFile) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFilesync(uint64(l))
	}
	if m.Size != 0 {
		n += 1 + sovFilesync(uint64(m.Size))
	}
	if m.Type != 0 {
		n += 1 + sovFilesync(uint64(m.Type))
	}
	return n
}

func (m *SyncResp) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovFilesync(uint64(m.Total))
	}
	if m.TotalSize != 0 {
		n += 1 + sovFilesync(uint64(m.TotalSize))
	}
	if m.ActualSendBytes != 0 {
		n += 1 + sovFilesync(uint64(m.ActualSendBytes))
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.ProtoSize()
			n += 1 + l + sovFilesync(uint64(l))
		}
	}
	return n
}

func sovFilesync(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFilesync(x uint64) (n int) {
	return sovFilesync(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FileBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilesync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilesync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilesync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entry == nil {
				m.Entry = &filesystem.Entry{}
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnd = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFilesync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFilesync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilesync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSize", wireType)
			}
			m.TotalSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilesync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilesync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilesync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilesync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, &FileBase{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilesync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFilesync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileIdx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilesync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileIdx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileIdx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idx", wireType)
			}
			m.Idx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFilesync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFilesync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HashBuf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilesync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HashBuf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HashBuf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Len", wireType)
			}
			m.Len = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Len |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum1", wireType)
			}
			m.Sum1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sum1 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFilesync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFilesync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sum2 = append(m.Sum2[:0], dAtA[iNdEx:postIndex]...)
			if m.Sum2 == nil {
				m.Sum2 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilesync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFilesync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HashHead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilesync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HashHead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HashHead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckSumCount", wireType)
			}
			m.CheckSumCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckSumCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockLength", wireType)
			}
			m.BlockLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockLength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckSumLength", wireType)
			}
			m.CheckSumLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckSumLength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainderLength", wireType)
			}
			m.RemainderLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainderLength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilesync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilesync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashs = append(m.Hashs, &HashBuf{})
			if err := m.Hashs[len(m.Hashs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilesync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFilesync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilesync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilesync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilesync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hash == nil {
				m.Hash = &HashBuf{}
			}
			if err := m.Hash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFilesync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFilesync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnd = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFilesync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFilesync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilesync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: syncFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: syncFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilesync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilesync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size", wireType)
			}
			m.Size = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= filesystem.EntryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFilesync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFilesync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilesync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSize", wireType)
			}
			m.TotalSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualSendBytes", wireType)
			}
			m.ActualSendBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActualSendBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilesync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilesync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, &SyncFile{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilesync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFilesync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFilesync(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFilesync
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFilesync
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFilesync
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFilesync
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFilesync        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFilesync          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFilesync = fmt.Errorf("proto: unexpected end of group")
)

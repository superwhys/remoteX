// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal/fs/entry.proto

package fs

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/superwhys/remoteX/pkg/proto/ext"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EntryType int32

const (
	EntryTypeUnknown EntryType = 0
	EntryTypeFile    EntryType = 1
	EntryTypeDir     EntryType = 2
)

var EntryType_name = map[int32]string{
	0: "ENTRY_TYPE_UNKNOWN",
	1: "ENTRY_TYPE_FILE",
	2: "ENTRY_TYPE_DIR",
}

var EntryType_value = map[string]int32{
	"ENTRY_TYPE_UNKNOWN": 0,
	"ENTRY_TYPE_FILE":    1,
	"ENTRY_TYPE_DIR":     2,
}

func (x EntryType) String() string {
	return proto.EnumName(EntryType_name, int32(x))
}

func (EntryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4b658408804859ad, []int{0}
}

type Entry struct {
	Name         string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" yaml:"-"`
	Type         EntryType `protobuf:"varint,2,opt,name=type,proto3,enum=entry.EntryType" json:"type,omitempty" yaml:"-"`
	Size         int64     `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty" yaml:"-"`
	Path         string    `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty" yaml:"-"`
	CreatedTime  string    `protobuf:"bytes,5,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty" yaml:"-"`
	ModifiedTime string    `protobuf:"bytes,6,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty" yaml:"-"`
	AccessedTime string    `protobuf:"bytes,7,opt,name=accessed_time,json=accessedTime,proto3" json:"accessed_time,omitempty" yaml:"-"`
	Owner        string    `protobuf:"bytes,8,opt,name=owner,proto3" json:"owner,omitempty" yaml:"-"`
	Permissions  string    `protobuf:"bytes,9,opt,name=permissions,proto3" json:"permissions,omitempty" yaml:"-"`
	Children     []*Entry  `protobuf:"bytes,10,rep,name=children,proto3" json:"children,omitempty" yaml:"-"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b658408804859ad, []int{0}
}
func (m *Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Entry) GetType() EntryType {
	if m != nil {
		return m.Type
	}
	return EntryTypeUnknown
}

func (m *Entry) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Entry) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Entry) GetCreatedTime() string {
	if m != nil {
		return m.CreatedTime
	}
	return ""
}

func (m *Entry) GetModifiedTime() string {
	if m != nil {
		return m.ModifiedTime
	}
	return ""
}

func (m *Entry) GetAccessedTime() string {
	if m != nil {
		return m.AccessedTime
	}
	return ""
}

func (m *Entry) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Entry) GetPermissions() string {
	if m != nil {
		return m.Permissions
	}
	return ""
}

func (m *Entry) GetChildren() []*Entry {
	if m != nil {
		return m.Children
	}
	return nil
}

type ListResp struct {
	Entries []*Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries" yaml:"-"`
}

func (m *ListResp) Reset()         { *m = ListResp{} }
func (m *ListResp) String() string { return proto.CompactTextString(m) }
func (*ListResp) ProtoMessage()    {}
func (*ListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b658408804859ad, []int{1}
}
func (m *ListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResp.Merge(m, src)
}
func (m *ListResp) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListResp proto.InternalMessageInfo

func (m *ListResp) GetEntries() []*Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterEnum("entry.EntryType", EntryType_name, EntryType_value)
	proto.RegisterType((*Entry)(nil), "entry.Entry")
	proto.RegisterType((*ListResp)(nil), "entry.ListResp")
}

func init() { proto.RegisterFile("internal/fs/entry.proto", fileDescriptor_4b658408804859ad) }

var fileDescriptor_4b658408804859ad = []byte{
	// 577 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0x3f, 0x6f, 0xd3, 0x4c,
	0x1c, 0xc7, 0x73, 0x6d, 0xd3, 0x26, 0xd7, 0xb4, 0xf5, 0x73, 0x7a, 0xa0, 0x56, 0x06, 0xdb, 0x8a,
	0x2a, 0x14, 0xa1, 0x92, 0xa0, 0xb0, 0x31, 0xa0, 0x2a, 0x4a, 0x02, 0x15, 0x55, 0x40, 0x47, 0x0a,
	0x94, 0x25, 0xb8, 0xce, 0xb5, 0x39, 0x88, 0xff, 0xc8, 0x77, 0x55, 0x30, 0x13, 0x1b, 0x52, 0x26,
	0xde, 0x40, 0xa4, 0xbe, 0x9c, 0x6e, 0x64, 0x64, 0xb2, 0x44, 0xb3, 0x79, 0xec, 0x2b, 0x40, 0xbe,
	0xd4, 0xa9, 0x53, 0xe5, 0xc6, 0xdf, 0xef, 0xfb, 0xbd, 0xcf, 0xc7, 0x96, 0xec, 0x83, 0xbb, 0xd4,
	0xe1, 0xc4, 0x77, 0xcc, 0x41, 0xf5, 0x8c, 0x55, 0x89, 0xc3, 0xfd, 0xa0, 0xe2, 0xf9, 0x2e, 0x77,
	0x51, 0x56, 0x0c, 0xc5, 0x3c, 0xf9, 0xc6, 0x67, 0x9b, 0xd2, 0x8f, 0x0d, 0x98, 0x6d, 0xc6, 0x4b,
	0xd4, 0x80, 0x6b, 0x8e, 0x69, 0x13, 0x15, 0x18, 0xa0, 0x9c, 0xaf, 0x3f, 0x8d, 0x42, 0x7d, 0x3b,
	0x9e, 0xf7, 0x5d, 0x9b, 0x72, 0x62, 0x7b, 0x3c, 0xb8, 0x09, 0xf5, 0x5c, 0x60, 0xda, 0x83, 0xe7,
	0xa5, 0x27, 0xa5, 0x9b, 0xdf, 0x7b, 0xf7, 0x52, 0x2c, 0x4e, 0xa3, 0xf7, 0x70, 0x8d, 0x07, 0x1e,
	0x51, 0x57, 0x0c, 0x50, 0xde, 0xae, 0x29, 0x95, 0x99, 0x5d, 0x18, 0x3a, 0x81, 0x47, 0x66, 0xdc,
	0xb8, 0x21, 0xe7, 0x2e, 0xa6, 0x58, 0xf0, 0xe2, 0xa7, 0x63, 0xf4, 0x3b, 0x51, 0x57, 0x0d, 0x50,
	0x5e, 0x9d, 0x51, 0xe2, 0x59, 0x4e, 0x59, 0x4c, 0xb1, 0x38, 0x1d, 0x53, 0x3c, 0x93, 0xf7, 0xd5,
	0xb5, 0xbb, 0x77, 0x8c, 0x67, 0x39, 0x65, 0x31, 0xc5, 0xe2, 0x34, 0xb2, 0x60, 0xc1, 0xf2, 0x89,
	0xc9, 0x49, 0xaf, 0xcb, 0xa9, 0x4d, 0xd4, 0xac, 0xa0, 0x1d, 0x44, 0xa1, 0xfe, 0x30, 0xbd, 0x97,
	0x52, 0x25, 0x2d, 0xbc, 0x79, 0xbb, 0xef, 0x50, 0x9b, 0xa0, 0x73, 0xb8, 0x65, 0xbb, 0x3d, 0x7a,
	0x46, 0x13, 0xcb, 0xba, 0xb0, 0xd4, 0xa3, 0x50, 0xdf, 0x5d, 0x08, 0xa4, 0x1a, 0x59, 0x0d, 0x17,
	0x92, 0x20, 0x11, 0x99, 0x96, 0x45, 0x18, 0x4b, 0x44, 0x1b, 0x77, 0xa2, 0x85, 0x40, 0x2e, 0x92,
	0xd4, 0x70, 0x21, 0x09, 0x84, 0xe8, 0x15, 0xcc, 0xba, 0x43, 0x87, 0xf8, 0x6a, 0x4e, 0x08, 0x6a,
	0x51, 0xa8, 0xef, 0x88, 0x85, 0x14, 0x7c, 0x3f, 0xc6, 0x33, 0x00, 0xfa, 0x0c, 0x37, 0x3d, 0xe2,
	0xdb, 0x94, 0x31, 0xea, 0x3a, 0x4c, 0xcd, 0x0b, 0xde, 0x8b, 0x28, 0xd4, 0x1f, 0xa4, 0xd6, 0x52,
	0xea, 0xf2, 0x12, 0x4e, 0x23, 0xd1, 0x17, 0x98, 0xb3, 0xfa, 0x74, 0xd0, 0xf3, 0x89, 0xa3, 0x42,
	0x63, 0xb5, 0xbc, 0x59, 0x2b, 0xa4, 0x3f, 0xe5, 0xfa, 0xc1, 0x55, 0xa8, 0x83, 0x28, 0xd4, 0x51,
	0xd2, 0x92, 0xda, 0x96, 0x34, 0x2e, 0x27, 0x7b, 0x00, 0xcf, 0xf9, 0xa5, 0x77, 0x30, 0x77, 0x44,
	0x19, 0xc7, 0x84, 0x79, 0xe8, 0x25, 0xdc, 0x88, 0x35, 0x94, 0x30, 0x15, 0x2c, 0xd1, 0xea, 0xb7,
	0xda, 0xa4, 0x94, 0x76, 0x09, 0x6a, 0x12, 0x3c, 0xfe, 0x09, 0x60, 0x7e, 0xfe, 0xd7, 0xa1, 0x7d,
	0x88, 0x9a, 0xed, 0x0e, 0x3e, 0xe9, 0x76, 0x4e, 0xde, 0x36, 0xbb, 0xc7, 0xed, 0xd7, 0xed, 0x37,
	0x1f, 0xda, 0x4a, 0xa6, 0xf8, 0xff, 0x68, 0x6c, 0x28, 0xf3, 0xda, 0xb1, 0xf3, 0xd5, 0x71, 0x87,
	0x0e, 0x7a, 0x04, 0x77, 0x52, 0xed, 0xd6, 0xe1, 0x51, 0x53, 0x01, 0xc5, 0xff, 0x46, 0x63, 0x63,
	0x6b, 0x5e, 0x6d, 0xd1, 0x01, 0x41, 0x7b, 0x70, 0x3b, 0xd5, 0x6b, 0x1c, 0x62, 0x65, 0xa5, 0xa8,
	0x8c, 0xc6, 0x46, 0x61, 0x5e, 0x6b, 0x50, 0xbf, 0xde, 0x9a, 0xfc, 0xd5, 0x32, 0x57, 0xd7, 0x1a,
	0x98, 0x5c, 0x6b, 0xe0, 0xd7, 0x54, 0xcb, 0x5c, 0x4e, 0x35, 0x30, 0x99, 0x6a, 0x99, 0x3f, 0x53,
	0x2d, 0xf3, 0xa9, 0x7c, 0x4e, 0x79, 0xff, 0xe2, 0xb4, 0x62, 0xb9, 0x76, 0x95, 0x5d, 0x78, 0xc4,
	0x1f, 0xf6, 0x03, 0x56, 0xf5, 0x89, 0xed, 0x72, 0xf2, 0xb1, 0x9a, 0xba, 0xc7, 0x4e, 0xd7, 0xc5,
	0x85, 0xf5, 0xec, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x16, 0x63, 0x0b, 0xb8, 0xdd, 0x04, 0x00,
	0x00,
}

func (m *Entry) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entry) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Children) > 0 {
		for iNdEx := len(m.Children) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Children[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntry(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Permissions) > 0 {
		i -= len(m.Permissions)
		copy(dAtA[i:], m.Permissions)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.Permissions)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AccessedTime) > 0 {
		i -= len(m.AccessedTime)
		copy(dAtA[i:], m.AccessedTime)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.AccessedTime)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ModifiedTime) > 0 {
		i -= len(m.ModifiedTime)
		copy(dAtA[i:], m.ModifiedTime)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.ModifiedTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CreatedTime) > 0 {
		i -= len(m.CreatedTime)
		copy(dAtA[i:], m.CreatedTime)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.CreatedTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x22
	}
	if m.Size != 0 {
		i = encodeVarintEntry(dAtA, i, uint64(m.Size))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintEntry(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListResp) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntry(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintEntry(dAtA []byte, offset int, v uint64) int {
	offset -= sovEntry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Entry) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovEntry(uint64(m.Type))
	}
	if m.Size != 0 {
		n += 1 + sovEntry(uint64(m.Size))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.CreatedTime)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.ModifiedTime)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.AccessedTime)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.Permissions)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.ProtoSize()
			n += 1 + l + sovEntry(uint64(l))
		}
	}
	return n
}

func (m *ListResp) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.ProtoSize()
			n += 1 + l + sovEntry(uint64(l))
		}
	}
	return n
}

func sovEntry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEntry(x uint64) (n int) {
	return sovEntry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= EntryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size", wireType)
			}
			m.Size = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModifiedTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessedTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessedTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permissions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &Entry{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &Entry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEntry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEntry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEntry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEntry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEntry = fmt.Errorf("proto: unexpected end of group")
)

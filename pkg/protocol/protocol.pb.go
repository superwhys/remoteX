// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/protocol/protocol.proto

package protocol

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/superwhys/remoteX/pkg/proto/ext"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errorutils if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ConnectionProtocol int32

const (
	ConnectionProtocolTcp ConnectionProtocol = 0
	ConnectionProtocolUdp ConnectionProtocol = 1
)

var ConnectionProtocol_name = map[int32]string{
	0: "CONNECTION_PROTOCOL_TCP",
	1: "CONNECTION_PROTOCOL_UDP",
}

var ConnectionProtocol_value = map[string]int32{
	"CONNECTION_PROTOCOL_TCP": 0,
	"CONNECTION_PROTOCOL_UDP": 1,
}

func (x ConnectionProtocol) String() string {
	return proto.EnumName(ConnectionProtocol_name, int32(x))
}

func (ConnectionProtocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cc91bbc4f8ea82bc, []int{0}
}

type ConnectionType int32

const (
	ConnectionTypeServer ConnectionType = 0
	ConnectionTypeClient ConnectionType = 1
)

var ConnectionType_name = map[int32]string{
	0: "CONNECTION_TYPE_SERVER",
	1: "CONNECTION_TYPE_CLIENT",
}

var ConnectionType_value = map[string]int32{
	"CONNECTION_TYPE_SERVER": 0,
	"CONNECTION_TYPE_CLIENT": 1,
}

func (x ConnectionType) String() string {
	return proto.EnumName(ConnectionType_name, int32(x))
}

func (ConnectionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cc91bbc4f8ea82bc, []int{1}
}

type ConnectionStatus int32

const (
	ConnectionStatusBeforeAuth   ConnectionStatus = 0
	ConnectionStatusConnecting   ConnectionStatus = 1
	ConnectionStatusConnected    ConnectionStatus = 3
	ConnectionStatusDisconnected ConnectionStatus = 4
	ConnectionStatusFailed       ConnectionStatus = 5
)

var ConnectionStatus_name = map[int32]string{
	0: "CONNECTION_STATUS_BEFORE_AUTH",
	1: "CONNECTION_STATUS_CONNECTING",
	3: "CONNECTION_STATUS_CONNECTED",
	4: "CONNECTION_STATUS_DISCONNECTED",
	5: "CONNECTION_STATUS_FAILED",
}

var ConnectionStatus_value = map[string]int32{
	"CONNECTION_STATUS_BEFORE_AUTH":  0,
	"CONNECTION_STATUS_CONNECTING":   1,
	"CONNECTION_STATUS_CONNECTED":    3,
	"CONNECTION_STATUS_DISCONNECTED": 4,
	"CONNECTION_STATUS_FAILED":       5,
}

func (x ConnectionStatus) String() string {
	return proto.EnumName(ConnectionStatus_name, int32(x))
}

func (ConnectionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cc91bbc4f8ea82bc, []int{2}
}

type Address struct {
	IpAddress string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ipAddress" yaml:"addr"`
	Port      int    `protobuf:"varint,2,opt,name=port,proto3,casttype=int" json:"port" yaml:"port"`
	Schema    string `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema" yaml:"schema"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc91bbc4f8ea82bc, []int{0}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Address.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *Address) GetPort() int {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Address) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

type Hello struct {
	DeviceName     string `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"deviceName" `
	ClientName     string `protobuf:"bytes,2,opt,name=client_name,json=clientName,proto3" json:"clientName" `
	ClientVersion  string `protobuf:"bytes,3,opt,name=client_version,json=clientVersion,proto3" json:"clientVersion" `
	NumConnections int    `protobuf:"varint,4,opt,name=num_connections,json=numConnections,proto3,casttype=int" json:"numConnections" `
	Timestamp      int64  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp" `
}

func (m *Hello) Reset()         { *m = Hello{} }
func (m *Hello) String() string { return proto.CompactTextString(m) }
func (*Hello) ProtoMessage()    {}
func (*Hello) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc91bbc4f8ea82bc, []int{1}
}
func (m *Hello) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hello) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hello.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hello) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hello.Merge(m, src)
}
func (m *Hello) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Hello) XXX_DiscardUnknown() {
	xxx_messageInfo_Hello.DiscardUnknown(m)
}

var xxx_messageInfo_Hello proto.InternalMessageInfo

func (m *Hello) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *Hello) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *Hello) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *Hello) GetNumConnections() int {
	if m != nil {
		return m.NumConnections
	}
	return 0
}

func (m *Hello) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterEnum("protocol.ConnectionProtocol", ConnectionProtocol_name, ConnectionProtocol_value)
	proto.RegisterEnum("protocol.ConnectionType", ConnectionType_name, ConnectionType_value)
	proto.RegisterEnum("protocol.ConnectionStatus", ConnectionStatus_name, ConnectionStatus_value)
	proto.RegisterType((*Address)(nil), "protocol.Address")
	proto.RegisterType((*Hello)(nil), "protocol.Hello")
}

func init() { proto.RegisterFile("pkg/protocol/protocol.proto", fileDescriptor_cc91bbc4f8ea82bc) }

var fileDescriptor_cc91bbc4f8ea82bc = []byte{
	// 664 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0x3b, 0x6f, 0xd3, 0x5e,
	0x18, 0xc6, 0x7d, 0x72, 0xe9, 0xff, 0x9f, 0x53, 0xb5, 0x98, 0x23, 0x5a, 0x5c, 0xb7, 0xb5, 0xad,
	0xa8, 0xa0, 0xd2, 0xa1, 0x19, 0x8a, 0x10, 0xaa, 0x00, 0x91, 0x38, 0x4e, 0x1b, 0xa9, 0x4a, 0x22,
	0xc7, 0xa9, 0x80, 0xc5, 0x72, 0x9d, 0x43, 0x63, 0x11, 0x5f, 0x64, 0x9f, 0x14, 0x2a, 0x31, 0x32,
	0x65, 0xe2, 0x0b, 0x44, 0x62, 0xe4, 0xa3, 0xc0, 0x44, 0x37, 0x98, 0x2c, 0xd1, 0x6c, 0x19, 0x3b,
	0x76, 0x42, 0xbe, 0xb4, 0x4e, 0x73, 0x59, 0xec, 0xf7, 0x79, 0x9f, 0xf7, 0xf7, 0x1c, 0xfb, 0x1c,
	0xcb, 0x70, 0xdd, 0xf9, 0x70, 0x5a, 0x70, 0x5c, 0x9b, 0xd8, 0xba, 0xdd, 0xbd, 0x2d, 0x76, 0xc3,
	0x02, 0xfd, 0x7f, 0xa3, 0xd9, 0x1c, 0xfe, 0x44, 0xa2, 0x66, 0xfe, 0x27, 0x80, 0xff, 0x15, 0xdb,
	0x6d, 0x17, 0x7b, 0x1e, 0x12, 0x21, 0x34, 0x1c, 0x55, 0x8b, 0x14, 0x03, 0x04, 0xb0, 0x9d, 0x2b,
	0x6d, 0x8d, 0x7c, 0x3e, 0x67, 0x38, 0xf1, 0xc8, 0x95, 0xcf, 0x2f, 0x9e, 0x6b, 0x66, 0x77, 0x3f,
	0x1f, 0x4c, 0xe5, 0xaf, 0x7f, 0x6d, 0x65, 0x82, 0x42, 0x4e, 0x26, 0xd0, 0x3e, 0xcc, 0x38, 0xb6,
	0x4b, 0x98, 0x94, 0x00, 0xb6, 0xb3, 0xa5, 0xc7, 0x23, 0x9f, 0x0f, 0x75, 0x42, 0x06, 0x2a, 0x7f,
	0xed, 0xf3, 0x69, 0xc3, 0x22, 0x41, 0x40, 0xa0, 0xe5, 0xf0, 0x8a, 0x5e, 0xc2, 0x05, 0x4f, 0xef,
	0x60, 0x53, 0x63, 0xd2, 0xe1, 0xe2, 0x8f, 0x46, 0x3e, 0x1f, 0x77, 0xae, 0x7c, 0x7e, 0x29, 0xe2,
	0x23, 0x1d, 0xac, 0x1d, 0x5b, 0x72, 0x7c, 0xcf, 0x7f, 0x4f, 0xc1, 0xec, 0x21, 0xee, 0x76, 0x6d,
	0xb4, 0x07, 0x17, 0xdb, 0xf8, 0xcc, 0xd0, 0xb1, 0x6a, 0x69, 0x26, 0x8e, 0x5f, 0x05, 0x8d, 0x7c,
	0x1e, 0x46, 0xed, 0x9a, 0x66, 0xe2, 0x2b, 0x9f, 0xa7, 0xe4, 0x31, 0x1d, 0x40, 0x7a, 0xd7, 0xc0,
	0x16, 0x89, 0xa0, 0x54, 0x02, 0x45, 0xed, 0x04, 0x4a, 0x34, 0x7a, 0x01, 0x97, 0x63, 0xe8, 0x0c,
	0xbb, 0x9e, 0x61, 0x5b, 0xf1, 0xa3, 0xaf, 0x8c, 0x7c, 0x7e, 0x29, 0x72, 0x8e, 0x23, 0x23, 0x44,
	0xef, 0xb6, 0x50, 0x05, 0xde, 0xb3, 0x7a, 0xa6, 0xaa, 0xdb, 0x96, 0x85, 0x75, 0x62, 0xd8, 0x96,
	0xc7, 0x64, 0xc2, 0x7d, 0xdb, 0x1c, 0xf9, 0xfc, 0xb2, 0xd5, 0x33, 0xc5, 0xc4, 0x09, 0xf8, 0x78,
	0xdb, 0xe4, 0x09, 0x0b, 0x15, 0x60, 0x8e, 0x18, 0x26, 0xf6, 0x88, 0x66, 0x3a, 0x4c, 0x56, 0x00,
	0xdb, 0xe9, 0xd2, 0xfd, 0xe0, 0xe0, 0x6e, 0x9b, 0xe1, 0xe2, 0x89, 0xdc, 0xf9, 0x02, 0x20, 0x4a,
	0x02, 0x1a, 0xf1, 0x87, 0x81, 0x9e, 0xc1, 0x87, 0x62, 0xbd, 0x56, 0x93, 0x44, 0xa5, 0x5a, 0xaf,
	0xa9, 0x0d, 0xb9, 0xae, 0xd4, 0xc5, 0xfa, 0x91, 0xaa, 0x88, 0x0d, 0x9a, 0x62, 0xd7, 0xfa, 0x03,
	0x61, 0x65, 0x1a, 0x52, 0x74, 0x67, 0x1e, 0xd7, 0x2a, 0x37, 0x68, 0x30, 0x8f, 0x6b, 0xb5, 0x9d,
	0x9d, 0xcf, 0x70, 0x39, 0x31, 0x94, 0x73, 0x07, 0xa3, 0xa7, 0x70, 0x75, 0x2c, 0x49, 0x79, 0xdb,
	0x90, 0xd4, 0xa6, 0x24, 0x1f, 0x4b, 0x32, 0x4d, 0xb1, 0x4c, 0x7f, 0x20, 0x3c, 0xb8, 0x3b, 0xdf,
	0xc4, 0xee, 0x19, 0x76, 0x67, 0x51, 0xe2, 0x51, 0x55, 0xaa, 0x29, 0x34, 0x98, 0x45, 0x89, 0xe1,
	0x21, 0xec, 0xfc, 0x4e, 0x41, 0x3a, 0x31, 0x9a, 0x44, 0x23, 0x3d, 0x0f, 0x15, 0xe1, 0xe6, 0x58,
	0x54, 0x53, 0x29, 0x2a, 0xad, 0xa6, 0x5a, 0x92, 0x2a, 0x75, 0x59, 0x52, 0x8b, 0x2d, 0xe5, 0x90,
	0xa6, 0x58, 0xae, 0x3f, 0x10, 0xd8, 0x49, 0xb0, 0x84, 0xdf, 0xdb, 0x2e, 0x2e, 0xf6, 0x48, 0x07,
	0xbd, 0x86, 0x1b, 0xd3, 0x11, 0x37, 0x9d, 0xda, 0x01, 0x0d, 0x66, 0x27, 0xdc, 0x68, 0xeb, 0x14,
	0xbd, 0x82, 0xeb, 0x73, 0x13, 0xa4, 0x32, 0x9d, 0x66, 0x37, 0xfb, 0x03, 0x61, 0x6d, 0x4e, 0x00,
	0x6e, 0xa3, 0x32, 0xe4, 0xa6, 0xf9, 0x72, 0xb5, 0x99, 0x44, 0x64, 0x58, 0xa1, 0x3f, 0x10, 0x36,
	0x26, 0x23, 0xca, 0x86, 0xa7, 0xdf, 0xa6, 0x3c, 0x87, 0xcc, 0x74, 0x4a, 0xa5, 0x58, 0x3d, 0x92,
	0xca, 0x74, 0x96, 0x65, 0xfb, 0x03, 0x61, 0x75, 0x92, 0xaf, 0x68, 0x46, 0x17, 0xb7, 0x4b, 0x07,
	0x17, 0x7f, 0x39, 0xea, 0xc7, 0x25, 0x07, 0x2e, 0x2e, 0x39, 0xf0, 0x75, 0xc8, 0x51, 0xdf, 0x86,
	0x1c, 0xb8, 0x18, 0x72, 0xd4, 0x9f, 0x21, 0x47, 0xbd, 0x7b, 0x72, 0x6a, 0x90, 0x4e, 0xef, 0x64,
	0x57, 0xb7, 0xcd, 0x82, 0xd7, 0x73, 0xb0, 0xfb, 0xb1, 0x73, 0xee, 0x15, 0x5c, 0x6c, 0xda, 0x04,
	0xbf, 0x29, 0x8c, 0xff, 0xc2, 0x4e, 0x16, 0xc2, 0x6a, 0xef, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x23, 0xcd, 0x28, 0xc8, 0xd9, 0x04, 0x00, 0x00,
}

func (m *Address) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Schema) > 0 {
		i -= len(m.Schema)
		copy(dAtA[i:], m.Schema)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Schema)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Port != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.IpAddress) > 0 {
		i -= len(m.IpAddress)
		copy(dAtA[i:], m.IpAddress)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.IpAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Hello) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hello) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hello) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x28
	}
	if m.NumConnections != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.NumConnections))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ClientVersion) > 0 {
		i -= len(m.ClientVersion)
		copy(dAtA[i:], m.ClientVersion)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.ClientVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClientName) > 0 {
		i -= len(m.ClientName)
		copy(dAtA[i:], m.ClientName)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.ClientName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeviceName) > 0 {
		i -= len(m.DeviceName)
		copy(dAtA[i:], m.DeviceName)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.DeviceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProtocol(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtocol(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Address) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovProtocol(uint64(m.Port))
	}
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *Hello) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceName)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.ClientName)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.ClientVersion)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.NumConnections != 0 {
		n += 1 + sovProtocol(uint64(m.NumConnections))
	}
	if m.Timestamp != 0 {
		n += 1 + sovProtocol(uint64(m.Timestamp))
	}
	return n
}

func sovProtocol(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtocol(x uint64) (n int) {
	return sovProtocol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hello) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hello: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hello: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumConnections", wireType)
			}
			m.NumConnections = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumConnections |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtocol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtocol
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtocol
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtocol
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtocol        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtocol          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtocol = fmt.Errorf("proto: unexpected end of group")
)
